//randomowe liczby cpp i sumowanie tylko dodatnich XD     ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <stdlib.h>
#include <time.h>

using namespace std;

int main(){
int suma = 0;
    srand(time(NULL));
    for (int i=0;i<100;i++){
        int x=rand() % 100 + 1;
        
        if (x%2==0) //dzielenie modulo
        suma = x + suma;
        
        cout << x << endl;
    }

cout << "suma liczb parzystych = " << suma << endl;

    system("pause");
    return 0;
}


zadania z 14.09.2021     ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1.
#include<iostream>
using namespace std;
int main()
{

	int tab[2][2];
	int x;
	cout << "podaj liczbe" << endl;
	cin >> x;
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 2; j++)
		{
			tab[i][j] = x;
			cout << tab[i][j] << " ";
		}
		cout << endl;
	}

	return 0;
}

2.
#include<iostream>
using namespace std;
int main()
{

	int tab[2][2];
	int x,a,b,c,d;
	a = 0;
	b = 0;
	c = 0;
	d = 0;
	cout << "podaj liczbe" << endl;
	cin >> x;
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 2; j++)
		{
			tab[i][j] = x;

			if (i == 1) {
				if (j == 1) {
					a = x;
				}
				else { b = x; }
			}
			else {
				if (j == 1) {
					c = x;
				}
				else { d = x; }
			}
		}
		cout << endl;
	}
	cout << a << endl;
	cout << b << endl;
	cout << c << endl;
	cout << d << endl;
	int w = (a * d) - (c * b);
		cout << w << endl;
	return 0;
}

zad3.
#include <iostream>
#include <math.h>


using namespace std;


int main()
{

	int tab[10][10];

	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (i==j) {

				tab[i][j] = 1;
			}

			else {
				tab[i][j] = 0;
			}

			cout << tab[i][j] << " ";
		}
		cout << endl;
	}

	return 0;
}
zadanie 4.
#include <iostream>
#include <math.h>


using namespace std;


int main()
{

	int tab[10][10];
	int x = 0;
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (i == j) {

				tab[i][j] = x;
				x = x + 1;
			}

			else {
				tab[i][j] = 0;
			}

			cout << tab[i][j] << " ";
		}
		cout << endl;
	}

	return 0;
}

zadania z 21.09.2021    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
zadanie.1
#include <iostream>
#include <math.h>
#include <cstdio>
#include <cmath>

using namespace std;
void kartkowka() {

	int tab[5]; int x;
		for (int i = 0; i < 5; i++)
		{
			cout << "podaj liczbe:" << endl;
			cin >> x;
			tab[i] = x;
		}
		cout << "liczby tylko podzielne przez 5" << endl;
		for (int i = 0; i < 5; i++)
		{
			if (tab[i] % 5 == 0)
				cout << tab[i] << endl;
		}
	// GJ 6
}
void dodawanie(int a, int b) {
	cout << "dodawanie" << endl;
	cout << a + b << endl;
}
void odejmowanie(int a, int b) {
	cout << "odejmowanie" << endl;
	cout << a - b << endl;
}
void mnozenie(int a, int b) {
	cout << "mnozenie" << endl;
	cout << a * b << endl;
}
void dzielenie(int a, int b) {
	cout << "dzielenie" << endl;
	cout << a / b << endl;
}
void kwadrat(int a, int b) {
	cout << "kwadrat" << endl;
	cout << "pole" << endl;
	cout << a * a << endl;
	cout << "pobwod" << endl;
	cout << a * 4 << endl;
}
void trojkat_pk(int a, int b, int h) { //prosto katny
	cout << "trojkat_pk" << endl;
	cout << "pole" << endl;
	cout << 0.5 * (a + h) << endl;
	cout << "obwod" << endl;
	int c = (a * a) + (b * b);
	cout << a + b + sqrt(c) << endl;
}
void trapez_r(int a, int b, int h) { //równoramienny
	cout << "trapez_r" << endl;
	cout << "pole" << endl;
	cout << 0.5 * (a + b) * h << endl;
	cout << "obwod" << endl;
	int c = (a * a) + (b * b);
	cout << a + b + (sqrt(c) * 2) << endl;
}
int main(int a, int b, int h)
{
	kartkowka();
	cout << "liczby" << endl;
	cout << "a = 5" <<endl;
	cout << "b = 2" <<endl;
	cout << "h = 3" << endl;
	dodawanie(5, 2);
	odejmowanie(5, 2);
	mnozenie(5, 2);
	dzielenie(5, 2);
	kwadrat(5, 2);
	trojkat_pk(5, 2, 3);
	trapez_r(5, 2, 3);
	return 0;
}
kartówka.XD
#include<iostream>
using namespace std;
int main()
{

	int tab[5];
	int x;
	for (int i = 0; i < 5; i++)
	{
		cout << "podaj liczbe:"<< endl;
		cin >> x;
		tab[i] = x;
	}
	cout << endl;
	for (int i = 0; i < 5; i++)
	{
		if(tab[i]%5==0)
			cout << tab[i] << endl;
	}
	return 0;
}

// GJ 6
zadania z 28.09.2021    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
zadanie.1 -- Silnia liczby naturalnej n
#include <iostream>
using namespace std;

int main()
{
	unsigned int n;
	long long silnia = 1;

	cout << "Podaj n: ";
	cin >> n;

	for (int i = n; i > 1; i--)
		silnia *= i;

	cout << n << "! = " << silnia << endl;

	return 0;
}
zadanie.1.1 -- Silnia liczby naturalnej n
#include <iostream>
using namespace std;

int silnia(int n) {
	if (n == 1) {
		return 1;
	}
	else {
		return n * silnia(n - 1);
	}
}

int main()
{
	int n;
	cout << "Podaj ile liczb: ";
	cin >> n;

	cout << silnia(n);

	return 0;
}
kartkówka.XD2
#include <iostream>
#include <math.h>
#include <cstdio>
#include <cmath>
using namespace std;
// za pomocą funkcji void oblicz oblicz wartość c z twierdzenia pitagorasa 
//  3 4 5

void pitagoras(int a, int b){
	int c = (a * a) + (b * b);
	cout <<sqrt(c) << endl;
}

int main(int a, int b)
{
	int c;
	cout << "podaj a=" << endl;
	cin >> a;
	cout << "podaj b=" << endl;
	cin >> b;
	pitagoras(a, b);

	return 0;
}
zadanie.2 ciąg fibonaciego
#include <iostream>
using namespace std;

int fibonaci(int n) {
	if (n == 0) {
		return 0;
	}
	else if (n == 1) {
		return 1;
	}
	else {
		return fibonaci(n-1) + fibonaci(n-2);
	}
}

int main()
{
	int n;
	cout << "Podaj ile liczb: ";
	cin >> n;

	cout << fibonaci(n);

	return 0;
}
zadanie.3 // kantor
#include <iostream>
using namespace std;

double eu_pln(double n) {
	return n = n * 4, 62;
}
double pln_eu(double n) {
	return n = n * 0, 22;
}
void kantor(int n) {
	switch (n)
	{
	default:
		break;
	}
}
int main()
{
	cout << "wybory przeliczania walut: " << endl;

	int n;

	cin << n << endl;

	kantor(n)

	return 0;
}
zadania z 5.10.2021    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// zadanie.1
// zadanie.1.1 -- losowe życzenia z róznych okazji - tablice; wyświetl 5 przykładów
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <ctime>

using namespace std;

int main()
{
    setlocale(LC_CTYPE, "Polish");
    string tab[9];
    tab[0] = "Wszystkiego najlepszego";
    tab[1] = "dużo zdrowia";
    tab[2] = "karaluchy pod poduch";
    tab[3] = "połamania nóg";
    tab[4] = "zdrowia";
    tab[5] = "szczęścia";
    tab[6] = "lat sto";
    tab[7] = "pan bóg z tobą";
    tab[8] = "smacznej kwusi";

    srand(time(NULL));
    for (int i = 0; i < 5; i++) {
        int x = rand() % 9;
        cout << tab[x] << endl;
    }
    return 0;
}
zadanie.gra
/*
Dziś na zajęciach będziemy programowali prostą grę kościaną :D 

Na początku ma się pojawić z ilu graczy będzie składała się rozgrywka max 4 

Użytkownik może wybrać sobie nick. 

Każdy gracz ma mieć symulowany rzut dwiema kośćmi do gry oraz sumowany wynik 

Gracz z najwyższą sumą punktów ma wygrywać rundę 

Jeżeli dochodzi do remisu pomiędzy dowolną ilością graczy,  ma być powtarzany rzut kośćmi tylko pomiędzy graczami którzy mieli ten sam wynik 

Po sześciu rundach rozgrywka się kończy i jest przedstawiona tablica wyników 

Zasady na + 

Gracz który uzyska szóstkę na obu kostkach ma mieć możliwość dodatkowego rzutu  kośćmi w tej samej rundzie i dodania go do całego wyniku z rundy. 

Gracz któremu na obu kostkach wypadnie wynik parzysty może dodać +1 do wyniku 

Gracz któremu wypadną dwie jedynki otrzymuje w tej rundzie 0 punktów 
*/
// zadanie.gra
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <ctime>
using namespace std;

void zasady() {
setlocale(LC_CTYPE, "Polish");
cout << " " << endl;
cout << "Gracz z najwyższą sumą punktów - wygrywa rundę " << endl;
cout << "rund - 6 " << endl;
cout << "remis w rundzie - powtarzanie rundy tylko remisowych " << endl;
cout << "Zasady + " << endl;
cout << "Gracz który uzyska szóstkę na obu kostkach ma  możliwość dodatkowego rzutu  kośćmi w tej samej rundzie i dodaje do całego wyniku z rundy " << endl;
cout << "Gracz któremu na obu kostkach wypadnie wynik parzysty może dodać + 1 do wyniku " << endl;
cout << "Gracz któremu wypadną dwie jedynki otrzymuje w tej rundzie 0 punktów " << endl;
cout << " " << endl;
}
void autorzy() {
    setlocale(LC_CTYPE, "Polish");
    cout << " " << endl;
    cout << " zespół Timon i Pumba company " << endl;
    cout << " członkowie: " << endl;
    cout << "    timon - kosiara2015(bartek żebrowski)  " << endl;
    cout << "   pumba - yrzer(grzegorz szczepkowski)" << endl;
    cout << " " << endl;
}
int game_over(int wynik) {
    setlocale(LC_CTYPE, "Polish");
    cout << " " << endl;
    cout << " wynik" << wynik << endl;
    cout << " koniec - nie ma już nic więc wciśnij losowy przcisk" << endl;
    return 0;
}


int main()
{
    setlocale(LC_CTYPE, "Polish");
    cout << "gra kościana :D | play:1 | zasady:2 | autorzy:3 | ?:4 ||liczba:";
    int menu;
    cin >> menu;
    switch (menu)
    {
    case 1:
        cout << " start " << endl;
        break;
        
    case 2:
        zasady();
        main();
        break;
    case 3:
        autorzy();
        main();
        break;
    default:
        cout << " error " << endl;
        return main();
        break;
    }
    
    
    

    int wynik = 0;
    return game_over(wynik);
}
